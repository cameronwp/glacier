// Code generated by mockery v1.0.0
package filebuffermocks

import filebuffer "github.com/cameronwp/glacier/filebuffer"
import fs "github.com/cameronwp/glacier/fs"
import io "io"
import mock "github.com/stretchr/testify/mock"

// BufferFetcherHasher is an autogenerated mock type for the BufferFetcherHasher type
type BufferFetcherHasher struct {
	mock.Mock
}

// FetchAndHash provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *BufferFetcherHasher) FetchAndHash(_a0 io.ReaderAt, _a1 string, _a2 int64, _a3 int64) (filebuffer.FileChunk, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 filebuffer.FileChunk
	if rf, ok := ret.Get(0).(func(io.ReaderAt, string, int64, int64) filebuffer.FileChunk); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Get(0).(filebuffer.FileChunk)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.ReaderAt, string, int64, int64) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TreeHash provides a mock function with given fields: _a0, _a1
func (_m *BufferFetcherHasher) TreeHash(_a0 fs.Chunker, _a1 string) ([]byte, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(fs.Chunker, string) []byte); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(fs.Chunker, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
